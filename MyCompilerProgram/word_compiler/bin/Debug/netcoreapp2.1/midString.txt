<INT . int>
<ID . gcd>
<BRACKET_L . (>
<INT . int>
<ID . u>
<COMMA . ,>
<INT . int>
<ID . v>
<BRACKET_R . )>
<BRACE_L . {>
<IF . if>
<BRACKET_L . (>
<ID . v>
<RELOP . ==>
<NUM . 0>
<BRACKET_R . )>
<RETURN . return>
<ID . u>
<SEMICOLON . ;>
<ELSE . else>
<RETURN . return>
<ID . gcd>
<BRACKET_L . (>
<ID . v>
<COMMA . ,>
<ID . u>
<ADDOP . ->
<ID . u>
<MULOP . />
<ID . v>
<MULOP . *>
<ID . v>
<BRACKET_R . )>
<SEMICOLON . ;>
<BRACE_R . }>
<VOID . void>
<ID . main>
<BRACKET_L . (>
<VOID . void>
<BRACKET_R . )>
<BRACE_L . {>
<INT . int>
<ID . x>
<SEMICOLON . ;>
<INT . int>
<ID . y>
<SEMICOLON . ;>
<ID . x>
<EQUAL . =>
<ID . input>
<BRACKET_L . (>
<BRACKET_R . )>
<SEMICOLON . ;>
<ID . y>
<EQUAL . =>
<ID . input>
<BRACKET_L . (>
<BRACKET_R . )>
<SEMICOLON . ;>
<ID . output>
<BRACKET_L . (>
<ID . gcd>
<BRACKET_L . (>
<ID . x>
<COMMA . ,>
<ID . y>
<BRACKET_R . )>
<BRACKET_R . )>
<SEMICOLON . ;>
<BRACE_R . }>
